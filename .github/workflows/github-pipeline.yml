name: Terraform Github Action Pipeline

on:
  workflow_dispatch:
    inputs:
      tf_action:
        description: 'Terraform Action to perform: apply or destroy'
        required: true
        default: 'destroy'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  MY_IP: ${{ secrets.MY_IP }}
  GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  terraform:
    name: "Apply Terraform Code Changes"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      result: ${{ steps.terraform_apply.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Plan
        if: ${{ github.event.inputs.tf_action == 'apply' }}
        id: tf_plan
        run: terraform plan -no-color -out planfile -var="my_ip=${{ env.MY_IP }}"

      - name: Terraform Apply 
        if: ${{ github.event.inputs.tf_action == 'apply' }}
        id: terraform_apply
        run: terraform apply -auto-approve -var="my_ip=${{ env.MY_IP }}" -parallelism=1 planfile

      - name: Get kube Config file
        id: getconfig
        if: steps.terraform_apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Replace AWS Account ID in Cluster Autoscaler YAML
        id: replace_account_id
        if: steps.terraform_apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: |
          sed -i 's|<your-account-id>|${{ secrets.AWS_ACCOUNT_ID }}|g' ./modules/eks/cluster-autoscaler.yml

      - name: Apply Cluster Autoscaler YAML
        id: apply_autoscaler
        if: steps.replace_account_id.outcome == 'success'
        run: |
          kubectl apply -f ./modules/eks/cluster-autoscaler.yml

      - name: Install Ingress Controller
        id: ingress_install
        if: steps.apply_autoscaler.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

      - name: Terraform Destroy
        if: ${{ github.event.inputs.tf_action == 'destroy' }}
        id: terraform_destroy
        run: terraform destroy -auto-approve -var="my_ip=${{ env.MY_IP }}"

      - name: Verify Destruction
        if: ${{ github.event.inputs.tf_action == 'destroy' }}
        id: verify_destruction
        run: terraform state list || echo "No resources found (possibly already destroyed)"

  notify:
  name: "Send Slack Notification"
  runs-on: ubuntu-latest
  needs: terraform
  if: always()
  env:
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    TF_ACTION: ${{ github.event.inputs.tf_action }}

  steps:
    - name: Send Slack Notification
      run: |
        if [ "${{ needs.terraform.result }}" == "success" ]; then
          STATUS="SUCCESS"
          MESSAGE="Terraform *${TF_ACTION}* completed successfully."
        elif [ "${{ needs.terraform.result }}" == "failure" ]; then
          STATUS="FAILURE"
          MESSAGE="Terraform *${TF_ACTION}* failed!"
        else
          STATUS="UNKNOWN"
          MESSAGE="Terraform *${TF_ACTION}* completed with unknown status."
        fi

        curl -X POST -H 'Content-type: application/json' --data "{
          \"text\": \"*Terraform Pipeline Notification*\nAction: ${TF_ACTION}\nStatus: ${STATUS}\n${MESSAGE}\"
        }" $SLACK_WEBHOOK_URL

