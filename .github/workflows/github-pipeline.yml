name: Terraform Github Action Pipeline

on:
  push:
    branches:
      - main
      - staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  MY_IP: ${{ secrets.MY_IP }}
  GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  terraform:
    name: "Apply Terraform Code Changes"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github_action_role # not yet setup oidc authentication check

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "BACKEND_FILE=environments/prod/prod.backend.hcl" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "BACKEND_FILE=environments/staging/staging.backend.hcl" >> $GITHUB_ENV
          else
            echo "ERROR: No matching environment for branch ${{ github.ref }}."
            exit 1
          fi

      - name: Verify Backend File Exists
        run: |
          if [ ! -f "${{ env.BACKEND_FILE }}" ]; then
            echo "Error: Backend file ${{ env.BACKEND_FILE }} does not exist!"
            exit 1
          fi

      - name: Terraform Init
        run: terraform init -backend-config=${{ env.BACKEND_FILE }}

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -no-color -out planfile -var="my_ip=${{ env.MY_IP }}"

      # - name: Terraform Apply 
      #   id: terraform_apply
      #   run: terraform apply -auto-approve -var="my_ip=${{ env.MY_IP }}" -parallelism=1 planfile

      # - name: Get kube Config file
      #   id: getconfig
      #   if: steps.terraform_apply.outcome == 'success'
      #   run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      # - name: Replace AWS Account ID in Cluster Autoscaler YAML
      #   id: replace_account_id
      #   if: steps.terraform_apply.outcome == 'success' && steps.getconfig.outcome == 'success'
      #   run: |
      #     sed -i 's|<your-account-id>|${{ secrets.AWS_ACCOUNT_ID }}|g' cluster-autoscaler.yaml

      # - name: Apply Cluster Autoscaler YAML
      #   id: apply_autoscaler
      #   if: steps.replace_account_id.outcome == 'success'
      #   run: |
      #     kubectl apply -f cluster-autoscaler.yaml

      # - name: Install Ingress Controller
      #   id: ingress_install
      #   if: steps.apply_autoscaler.outcome == 'success'
      #   run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml


      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var="my_ip=${{ env.MY_IP }}"

      # Step to authenticate GitHub CLI
      # - name: Authenticate GitHub CLI
      #   run: |
      #     echo "${{ secrets.GIT_TOKEN }}" | gh auth login --with-token

      # Step to create Pull Request to Main Branch if Terraform Apply is successful
      # - name: Create Pull Request to Main Branch
        # if: success()  # This step will run only if the previous steps succeeded
        # if: steps.terraform_apply.outcome == 'success' && steps.getconfig.outcome == 'success' && steps.ingress_install.outcome == 'success'
        # run: |
        #   PR_TITLE="Automated PR: Terraform Deployment"
        #   PR_BODY="This pull request merges the latest changes from the staging branch after a successful Terraform deployment."
        #   gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head staging

      # Verify that the resources have been destroyed
      - name: Verify Destruction
        run: terraform state list
