name: Terraform Github Action Pipeline

on:
  push:
    branches:
      - main
      - staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  MY_IP: ${{ secrets.MY_IP }}

jobs:
  terraform:
    name: "Apply Terraform Code Changes"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "BACKEND_FILE=environments/prod/prod.backend.hcl" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "BACKEND_FILE=environments/staging/staging.backend.hcl" >> $GITHUB_ENV
          else
            echo "ERROR: No matching environment for branch ${{ github.ref }}."
            exit 1
          fi

      - name: Verify Backend File Exists
        run: |
          if [ ! -f "${{ env.BACKEND_FILE }}" ]; then
            echo "Error: Backend file ${{ env.BACKEND_FILE }} does not exist!"
            exit 1
          fi

      - name: Terraform Init
        run: terraform init -backend-config=${{ env.BACKEND_FILE }}

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -no-color -out planfile -var="my_ip=${{ env.MY_IP }}"
        continue-on-error: true
      
      - name: Terraform Plan Status
        if: steps.tf_plan.outcome == 'failure'
        run: exit 1
